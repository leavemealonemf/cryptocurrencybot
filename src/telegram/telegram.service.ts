import { Injectable, Logger } from '@nestjs/common';
import { Markup, Scenes, Telegraf } from 'telegraf';
import {
  Update,
  Ctx,
  Start,
  On,
  Hears,
  Command,
  Action,
} from 'nestjs-telegraf';
import { CryptoService } from 'src/crypto/crypto.service';
import { ConfigService } from '@nestjs/config';
import { toZonedTime, format } from 'date-fns-tz';
import { COMMANDS_LIST } from './helpers';
import { COINS_LIST, FAV_COINS_LIST } from 'src/crypto/helpers';
import { FavCoins, UserService } from 'src/user/user.service';

type Context = Scenes.SceneContext;

@Injectable()
@Update()
export class TelegramService extends Telegraf<Context> {
  private readonly logger = new Logger(TelegramService.name);

  constructor(
    private readonly cryptoService: CryptoService,
    private readonly userService: UserService,
    private readonly favcoinService: FavCoins,
  ) {
    const configService = new ConfigService();
    super(configService.get('TELEGRAM_BOT_TOKEN'));
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await this.userService.createUser(ctx.from.id).then((res) => {
      if (!res) {
        this.logger.log('User created early');
      } else {
        this.logger.log('User created now');
      }
    });

    return this.sendStartMessageContent(ctx);
  }

  @On('sticker')
  async onSticker(@Ctx() ctx: Context) {
    await ctx.reply('üëç');
  }

  @Action(FAV_COINS_LIST)
  async addCoinToFav(@Ctx() ctx: Context) {
    const ctxCoinData: string = ctx.callbackQuery['data'];
    const coinSymbol = ctxCoinData.split('_')[1];

    const coin = await this.favcoinService.addCoinToFav(
      'unknown',
      coinSymbol,
      ctx.from.id,
    );

    if (!coin) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É');
    }

    await ctx.editMessageText('–î–æ–±–∞–≤–ª–µ–Ω–æ');
  }

  @Action('add-to-fav')
  async getCoinsToFavAdd(@Ctx() ctx: Context) {
    const currencyList =
      await this.cryptoService.getUnformattedCryproCoinsList();
    console.log(currencyList);
    for (const coin of currencyList.data) {
      await ctx.reply(
        coin.name,
        Markup.inlineKeyboard([
          [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å', `fav_${coin.symbol}`)],
        ]),
      );
    }
  }

  @Action('coins')
  async getCurrencyCoinsFromEvent(@Ctx() ctx: Context) {
    const currentDate = this.getCurrentDateMSK(null);
    const currencyList = await this.cryptoService.getCryproCoinsList();
    await ctx.replyWithHTML(
      `<b>–°—Ç–æ–∏–º–æ–∏—Ç—å –º–æ–Ω–µ—Ç –Ω–∞ ${currentDate} (–ú–°–ö) üïî</b>`,
    );
    await ctx.reply(
      currencyList.toString(),
      Markup.inlineKeyboard([[Markup.button.callback('–í –º–µ–Ω—é', 'menu')]]),
    );
  }

  @Action(COMMANDS_LIST.MENU)
  async showMenu(@Ctx() ctx: Context) {
    return this.sendStartMessageContent(ctx);
  }

  @Action(COMMANDS_LIST.FAV_COINS)
  async getUserFavCoins(@Ctx() ctx: Context) {
    const coins = await this.favcoinService.getFavCoins(ctx.from.id);
    if (!coins || !coins.length) {
      await ctx.replyWithHTML(
        '<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç, –Ω–æ –≤—Å–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!)</b>',
        Markup.inlineKeyboard([
          Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å', 'add-to-fav'),
          Markup.button.callback('–ù–∞–∑–∞–¥', 'menu'),
        ]),
      );
      await ctx.replyWithSticker(
        'CAACAgEAAxkBAAEMLwlmT2AK3_BsSdqVLYoX01SeF7556QAChQkAAr-MkARgo4FgVtZuBjUE',
      );
    }

    await ctx.replyWithHTML('<b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: </b>');
    for (const el of coins) {
      const getCoinInfo = await this.cryptoService.getCurrentCoinInfo(
        el.symbol,
      );

      await ctx.replyWithHTML(`<b>${getCoinInfo.name}</b>`);
    }
    await ctx.replyWithHTML(
      '<b>–ü–æ –¥–∞–Ω–Ω—ã–º –º–æ–Ω–µ—Ç–∞–º –í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤! üïî</b>',
      Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', 'menu')]),
    );
  }

  @Action(COINS_LIST)
  async getCurrentCointInfoIvent(@Ctx() ctx: Context) {
    const coinInfo = await this.cryptoService.getCurrentCoinInfo(
      ctx.callbackQuery['data'],
    );

    if (!coinInfo) {
      await ctx.replyWithHTML('<b>–ü–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòû</b>');
    }

    this.currentCoinInfoPresent(coinInfo, ctx);
  }

  @Action('target-coins')
  async getTargetCoinsList(@Ctx() ctx: Context) {
    return this.sendTargetCoinsList(ctx);
  }

  @Command(COMMANDS_LIST.COINS)
  async getCurrencyCoins(@Ctx() ctx: Context) {
    const currentDate = this.getCurrentDateMSK(null);
    const currencyList = await this.cryptoService.getCryproCoinsList();
    await ctx.replyWithHTML(
      `<b>–°—Ç–æ–∏–º–æ–∏—Ç—å –º–æ–Ω–µ—Ç –Ω–∞ ${currentDate} (–ú–°–ö) üïî</b>`,
    );
    await ctx.reply(
      currencyList.toString(),
      Markup.inlineKeyboard([[Markup.button.callback('–í –º–µ–Ω—é', 'menu')]]),
    );
  }

  @Hears('FAQ')
  async getFAQ(@Ctx() ctx: Context) {
    await ctx.replyWithHTML(
      '<b>–Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ —Ü–µ–Ω –Ω–∞ –º–æ–Ω–µ—Ç—ã</b>üí∞',
    );
  }

  private async sendStartMessageContent(ctx: Context) {
    await ctx.replyWithSticker(
      'CAACAgIAAxkBAAEMDMNmNiCGLBfRf-Wtr6oP9whrq4d5ZAACVwEAAhAabSKlKzxU-3o0qjQE',
    );
    await ctx.reply(
      `–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, ${ctx.from.username}!üëãüèª`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('–í—Å–µ –º–æ–Ω–µ—Ç—ã', 'coins'),
          Markup.button.callback('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã', 'target-coins'),
        ],
        [Markup.button.callback('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã', 'fav-coins')],
      ]),
    );
  }

  private async sendTargetCoinsList(ctx: Context) {
    await ctx.replyWithHTML(
      `<b>–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éü™ô</b>`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('Bitcoin', 'btc'),
          Markup.button.callback('Ethereum', 'eth'),
          Markup.button.callback('Solana', 'sol'),
        ],
        [Markup.button.callback('–í –º–µ–Ω—é', 'menu')],
      ]),
    );
  }

  private async currentCoinInfoPresent(coin, ctx: Context) {
    const dateCoinUpd = this.getCurrentDateMSK(coin.last_updated);
    const startCoinDate = this.getCurrentDateMSK(coin.date_added);

    await ctx.replyWithHTML(
      `<b>–ù–∞–∑–≤–∞–Ω–∏–µ: ${coin.name} / ${coin.symbol} ü™ô</b>
<b>–¶–µ–Ω–∞ –≤ USD (—Ç–æ—á–Ω–∞—è): ${coin.quote.USD.price}üí≤</b>,
<b>–¶–µ–Ω–∞ –≤ USD (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è): ${Math.round(coin.quote.USD.price)}üí≤</b>,
<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã: ${dateCoinUpd} (–ú–°–ö) üïî</b>,
<b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –º–æ–Ω–µ—Ç—ã: ${startCoinDate} (–ú–°–ö) üïî</b>`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('–ù–∞–∑–∞–¥', 'target-coins'),
          Markup.button.callback('–í –º–µ–Ω—é', 'menu'),
        ],
      ]),
    );
  }

  private getCurrentDateMSK(time: string | null | undefined): string {
    let date: Date;

    if (!time) {
      date = new Date();
    } else {
      date = new Date(time);
    }

    const timeZone = 'Europe/Moscow';
    const zonedDate = toZonedTime(date, timeZone);

    const pattern = 'dd.MM.yyyy HH:mm:ss';
    const output = format(zonedDate, pattern, { timeZone: timeZone });

    return output;
  }
}
