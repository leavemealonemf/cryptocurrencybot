import { Injectable } from '@nestjs/common';
import { Markup, Scenes, Telegraf } from 'telegraf';
import { Update, Ctx, Start, Help, On, Hears } from 'nestjs-telegraf';
import { CryptoService } from 'src/crypto/crypto.service';
import { ConfigService } from '@nestjs/config';

type Context = Scenes.SceneContext;

@Injectable()
@Update()
export class TelegramService extends Telegraf<Context> {
  constructor(private readonly cryptoService: CryptoService) {
    const configService = new ConfigService();
    super(configService.get('TELEGRAM_BOT_TOKEN'));
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await ctx.replyWithSticker(
      'CAACAgIAAxkBAAEMDMNmNiCGLBfRf-Wtr6oP9whrq4d5ZAACVwEAAhAabSKlKzxU-3o0qjQE',
    );
    await ctx.reply(
      `–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, ${ctx.from.username}!üëãüèª`,
      Markup.keyboard([['–ú–æ–Ω–µ—Ç—ã', '–ö—Ä—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã', 'FAQ']]).resize(),
    );
  }

  @On('sticker')
  async onSticker(@Ctx() ctx: Context) {
    await ctx.reply('üëç');
  }

  @Hears('–ö—Ä—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã')
  async getBigCoinsKeyboardList(@Ctx() ctx: Context) {
    await ctx.replyWithHTML(
      `<b>–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éü™ô</b>`,
      Markup.keyboard([['Bitcoin', 'Ethereum', 'Solana'], ['–í –º–µ–Ω—é']]).resize(),
    );
  }

  @Hears('–í –º–µ–Ω—é')
  async backToMainKeyboardMenu(@Ctx() ctx: Context) {
    await ctx.replyWithHTML(
      '<b>–ú–µ–Ω—é</b>',
      Markup.keyboard([['–ú–æ–Ω–µ—Ç—ã', '–ö—Ä—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã', 'FAQ']]).resize(),
    );
  }

  @Hears('Bitcoin')
  async getBtcInfo(@Ctx() ctx: Context) {
    const coinInfo = await this.cryptoService.getCurrentCoinInfo('Bitcoin');

    if (!coinInfo) {
      await ctx.replyWithHTML('<b>–ü–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòû</b>');
    }

    this.currentCoinInfoPresent(coinInfo, ctx);
  }

  @Hears('Ethereum')
  async getEthInfo(@Ctx() ctx: Context) {
    const coinInfo = await this.cryptoService.getCurrentCoinInfo('Ethereum');

    if (!coinInfo) {
      await ctx.replyWithHTML('<b>–ü–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòû</b>');
    }

    this.currentCoinInfoPresent(coinInfo, ctx);
  }

  @Hears('Solana')
  async getSolInfo(@Ctx() ctx: Context) {
    const coinInfo = await this.cryptoService.getCurrentCoinInfo('Solana');

    if (!coinInfo) {
      await ctx.replyWithHTML('<b>–ü–æ –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòû</b>');
    }

    this.currentCoinInfoPresent(coinInfo, ctx);
  }

  @Hears('–ú–æ–Ω–µ—Ç—ã')
  async getCurrencyCoins(@Ctx() ctx: Context) {
    const date = new Date();

    const currencyList = await this.cryptoService.getCryproCoinsList();
    await ctx.replyWithHTML(
      `<b>–°—Ç–æ–∏–º–æ–∏—Ç—å –º–æ–Ω–µ—Ç –Ω–∞ ${date.getDay()}.${date.getMonth()}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}</b>`,
    );
    await ctx.reply(currencyList.toString());
  }

  @Hears('FAQ')
  async getFAQ(@Ctx() ctx: Context) {
    await ctx.replyWithHTML(
      '<b>–Ø –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ —Ü–µ–Ω –Ω–∞ –º–æ–Ω–µ—Ç—ã</b>üí∞',
    );
  }

  @Hears('/currency')
  async getCurrency(@Ctx() ctx: Context) {
    const currencyList = await this.cryptoService.getCryproCoinsList();
    await ctx.reply(currencyList.toString());
  }

  private async currentCoinInfoPresent(coin, ctx: Context) {
    const dateCoinUpd = new Date(coin.last_updated);
    const startCoinDate = new Date(coin.date_added);

    await ctx.replyWithHTML(
      `<b>–ù–∞–∑–≤–∞–Ω–∏–µ: ${coin.name} / ${coin.symbol} ü™ô</b>
<b>–¶–µ–Ω–∞ –≤ USD (—Ç–æ—á–Ω–∞—è): ${coin.quote.USD.price}üí≤</b>,
<b>–¶–µ–Ω–∞ –≤ USD (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è): ${Math.round(coin.quote.USD.price)}üí≤</b>,
<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã: ${dateCoinUpd.getFullYear()}.${dateCoinUpd.getMonth()}.${dateCoinUpd.getDay()}üïî</b>,
<b>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –º–æ–Ω–µ—Ç—ã: ${startCoinDate.getFullYear()}.${startCoinDate.getMonth()}.${startCoinDate.getDay()}üïî</b>`,
    );
  }
}
